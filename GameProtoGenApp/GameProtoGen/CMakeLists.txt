cmake_minimum_required(VERSION 3.25)
project(GameProtoGen LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Recomendado: si usás Ninja, que los libs salgan a un lugar predecible
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

include(FetchContent)

# --- Lua 5.4 ---
FetchContent_Declare(lua
  GIT_REPOSITORY https://github.com/lua/lua.git
  GIT_TAG v5.4.7
)
FetchContent_MakeAvailable(lua)
add_library(lua_static ${lua_SOURCE_DIR}/lapi.c ${lua_SOURCE_DIR}/lauxlib.c
    ${lua_SOURCE_DIR}/lbaselib.c ${lua_SOURCE_DIR}/lcode.c ${lua_SOURCE_DIR}/lcorolib.c
    ${lua_SOURCE_DIR}/lctype.c ${lua_SOURCE_DIR}/ldblib.c ${lua_SOURCE_DIR}/ldebug.c
    ${lua_SOURCE_DIR}/ldo.c ${lua_SOURCE_DIR}/ldump.c ${lua_SOURCE_DIR}/lfunc.c
    ${lua_SOURCE_DIR}/lgc.c ${lua_SOURCE_DIR}/linit.c ${lua_SOURCE_DIR}/liolib.c
    ${lua_SOURCE_DIR}/llex.c ${lua_SOURCE_DIR}/lmathlib.c ${lua_SOURCE_DIR}/lmem.c
    ${lua_SOURCE_DIR}/loadlib.c ${lua_SOURCE_DIR}/lobject.c ${lua_SOURCE_DIR}/lopcodes.c
    ${lua_SOURCE_DIR}/loslib.c ${lua_SOURCE_DIR}/lparser.c ${lua_SOURCE_DIR}/lstate.c
    ${lua_SOURCE_DIR}/lstring.c ${lua_SOURCE_DIR}/lstrlib.c ${lua_SOURCE_DIR}/ltable.c
    ${lua_SOURCE_DIR}/ltablib.c ${lua_SOURCE_DIR}/ltm.c ${lua_SOURCE_DIR}/lundump.c
    ${lua_SOURCE_DIR}/lutf8lib.c ${lua_SOURCE_DIR}/lvm.c ${lua_SOURCE_DIR}/lzio.c)
target_include_directories(lua_static PUBLIC ${lua_SOURCE_DIR})

# --- sol2 (header-only) ---
FetchContent_Declare(sol2
  GIT_REPOSITORY https://github.com/ThePhD/sol2.git
  GIT_TAG v3.3.0
)
FetchContent_MakeAvailable(sol2)

# ---------- SFML 3 ----------
# (Desactiva tests/ejemplos para acelerar)
set(SFML_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(SFML_BUILD_TESTING  OFF CACHE BOOL "" FORCE)

FetchContent_Declare(sfml
  GIT_REPOSITORY https://github.com/SFML/SFML.git
  GIT_TAG 3.0.0
)
FetchContent_MakeAvailable(sfml)
# Targets que exporta: SFML::System SFML::Window SFML::Graphics ...

# ---------- nlohmann/json ----------
FetchContent_Declare(json
  GIT_REPOSITORY https://github.com/nlohmann/json.git
  GIT_TAG v3.11.3
)
FetchContent_MakeAvailable(json)

# ---------- tinyfiledialogs (file picker nativo) ----------
FetchContent_Declare(tinyfiledialogs
  GIT_REPOSITORY https://github.com/native-toolkit/tinyfiledialogs.git
  GIT_TAG master
)
FetchContent_MakeAvailable(tinyfiledialogs)
add_library(tinyfiledialogs_lib ${tinyfiledialogs_SOURCE_DIR}/tinyfiledialogs.c)
target_include_directories(tinyfiledialogs_lib PUBLIC ${tinyfiledialogs_SOURCE_DIR})

# ---------- cpr (async HTTP over libcurl) ----------
set(CPR_BUILD_TESTS OFF CACHE BOOL "" FORCE)
# Si no tenés libcurl del sistema, esto compila uno embebido (más lento la primera vez).
set(CPR_USE_SYSTEM_CURL OFF CACHE BOOL "" FORCE)

FetchContent_Declare(cpr
  GIT_REPOSITORY https://github.com/libcpr/cpr.git
  GIT_TAG 1.11.1
)
FetchContent_MakeAvailable(cpr)

# ---------- Dear ImGui (rama docking) ----------
FetchContent_Declare(imgui
  GIT_REPOSITORY https://github.com/ocornut/imgui.git
  GIT_TAG v1.91.9-docking
)
FetchContent_MakeAvailable(imgui)
set(IMGUI_DIR ${imgui_SOURCE_DIR})
# Esto crea un target 'imgui' (lib) + incluye headers <imgui.h>

# ---------- ImGui-SFML 3.0 ----------
# IMPORTANTE:
# - Esta versión soporta SFML 3.
# - Como ya tenemos SFML e ImGui en el mismo árbol, no necesitamos que los "encuentre" fuera.
# - Por defecto ImGui-SFML intentará find_package(SFML 3) y 'imgui' target, que ya existen.

# (Opcional) apaga su build de ejemplo/tests para acelerar
set(IMGUI_SFML_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(IMGUI_SFML_BUILD_TESTING  OFF CACHE BOOL "" FORCE)

FetchContent_Declare(imgui-sfml
  GIT_REPOSITORY https://github.com/SFML/imgui-sfml.git
  GIT_TAG master
)
FetchContent_MakeAvailable(imgui-sfml)
# Target: ImGui-SFML::ImGui-SFML

# ---------- Tu ejecutable ----------
add_executable(GameProtoGen
    Core/Application.cpp
    Core/SFMLWindow.cpp

    # ECS
    ECS/Scene.cpp
    ECS/SceneSerializer.cpp

    # Systems
    Systems/Renderer2D.cpp
    Systems/PhysicsSystem.cpp
    Systems/ScriptVM.cpp
    Systems/ScriptSystem.cpp

    # Editor
    Editor/EditorApp.cpp
    Editor/ImGuiLayer.cpp
    Editor/Panels/ViewportPanel.cpp
    Editor/Panels/InspectorPanel.cpp
    Editor/Panels/ChatPanel.cpp

    # Net
    Net/ApiClient.cpp

    # ImGui extra
    ${IMGUI_DIR}/misc/cpp/imgui_stdlib.cpp
    
)

 target_sources(GameProtoGen PRIVATE
    ${IMGUI_DIR}/misc/cpp/imgui_stdlib.cpp
)

target_link_libraries(GameProtoGen PRIVATE
  SFML::Graphics
  SFML::Window
  SFML::System
  ImGui-SFML::ImGui-SFML
  nlohmann_json::nlohmann_json
  cpr::cpr
  lua_static
  tinyfiledialogs_lib 
)

# Copia toda la carpeta Assets al directorio donde queda la .exe (Debug/Release)
add_custom_command(TARGET GameProtoGen POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_SOURCE_DIR}/Assets
            $<TARGET_FILE_DIR:GameProtoGen>/Assets
)

if (WIN32)
  target_link_libraries(GameProtoGen PRIVATE comdlg32)
endif()

if (MSVC)
  add_compile_options("/utf-8")
endif()

target_include_directories(GameProtoGen PRIVATE 
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${IMGUI_DIR}/misc/cpp
    ${sol2_SOURCE_DIR}/include
)

